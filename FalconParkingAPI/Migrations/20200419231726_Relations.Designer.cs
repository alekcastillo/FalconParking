// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FalconParkingAPI.Migrations
{
    [DbContext(typeof(FalconParkingDbContext))]
    [Migration("20200419231726_Relations")]
    partial class Relations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Views.ParkingLotView", b =>
                {
                    b.Property<Guid>("AggregateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AvailableSlotsCount")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSlotsCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AggregateId");

                    b.ToTable("lot_view","parking");
                });

            modelBuilder.Entity("Domain.Views.ParkingSlotView", b =>
                {
                    b.Property<Guid>("AggregateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentOccupantLicensePlate")
                        .HasColumnType("text");

                    b.Property<bool>("IsReservable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ParkingLotId")
                        .HasColumnType("uuid");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AggregateId");

                    b.HasIndex("ParkingLotId");

                    b.ToTable("slot_view","parking");
                });

            modelBuilder.Entity("Infrastructure.Models.ParkingLotEventModel", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventData")
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.HasKey("EventId");

                    b.ToTable("lot_eventlog","parking");
                });

            modelBuilder.Entity("Infrastructure.Models.ParkingSlotEventModel", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventData")
                        .HasColumnType("jsonb");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.HasKey("EventId");

                    b.ToTable("slot_eventlog","parking");
                });

            modelBuilder.Entity("Domain.Views.ParkingSlotView", b =>
                {
                    b.HasOne("Domain.Views.ParkingLotView", "ParkingLot")
                        .WithMany("Slots")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
